stages:
  - build
  - test
  - examples
  - package
  - doc
  - publish

.build_template: &build_definition
  stage: build
  script:
    - "rustc --version && cargo --version"
    - cargo build --verbose
    - cargo build --verbose --release

build:oldest:
  <<: *build_definition
  image: 'rust:1.44-alpine'
  before_script:
    - apk add musl-dev
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'

build:latest:
  <<: *build_definition
  image: 'rust:alpine'
  before_script:
    - apk add musl-dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

test:run:
  stage: test
  image: 'rust:alpine'
  before_script:
    - apk add musl-dev
  needs: ["build:latest"]
  script:
    - "rustc --version && cargo --version"
    - cargo test --verbose
    - cargo test --verbose --release
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

cover:
  stage: test
  # Tarpaulin does not work in Alpine image.
  image: 'rust:slim'
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends curl grep coreutils wget tar gzip
    - >
      curl -s https://api.github.com/repos/xd009642/tarpaulin/releases/latest
      | grep "browser_download_url"
      | cut -d '"' -f 4
      | wget -q -i - -O -
      | tar -xzp
    - mv cargo-tarpaulin $CARGO_HOME/bin
  script:
    - "rustc --version && cargo --version"
    - cargo tarpaulin -v --ignore-tests --exclude-files cargo -o Html
  coverage: '/\d+\.\d+\% coverage/'
  artifacts:
    paths:
      - tarpaulin-report.html
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'

examples:run:
  stage: examples
  image: 'rust:slim'
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends make
  script:
    - "rustc --version && cargo --version"
    - make all_examples
  needs: ["test:run"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'

package:build:
  stage: package
  image: 'rust:alpine'
  before_script:
    - apk add musl-dev
  script:
    - "rustc --version && cargo --version"
    - cargo package --list --verbose
    - cargo package --verbose
  # Do not fetch artifacts from previous stages
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "development"'

pages:
  stage: doc
  image: 'alpine:latest'
  script:
    - mkdir -p public/
    - cp -v design/public/*.html public
    - cp -v design/public/*.css public
  artifacts:
    paths:
      - public
  # Do not fetch artifacts from previous stages
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
      allow_failure: true

publish:send:
  stage: publish
  image: 'rust:alpine'
  before_script:
    - apk add musl-dev
  script:
    - "rustc --version && cargo --version"
    - cargo publish --verbose
  # Do not fetch artifacts from previous stages
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
      allow_failure: true
